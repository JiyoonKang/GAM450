/******************************************************************************/
/*!
\file     InGameEditor.cpp
\project  Bring the Paint
\author Jiyun Kang

Copyright (C) 2015 DigiPen Institute of Technology.
Reproduction or disclosure of this file or its contents without the prior
written consent of DigiPen Institute of Technology is prohibited.
*/
/******************************************************************************/
#include "pch/precompiled.h"
#include "InGameEditor.h"
#include "imgui\imgui.h"
//#include "ImguiHelper\imgui.h"

#include "Editor\EditorUI\EditorHierarchyWindow.h"
#include "Editor\EditorUI\EditorInspectorWindow.h"
#include "Editor\EditorUI\EditorMainMenuBar.h"
#include "Editor\EditorUI\EditorProjectWindow.h"
#include "Editor\EditorUI\EditorWindow.h"

#include "Editor/InGameEditor/imgui_impl_dx11.h"

#pragma warning( push )
#pragma warning( disable : 4005 )
#include <d3d11.h>
#include <d3dcompiler.h>
#define DIRECTINPUT_VERSION 0x0800
#pragma warning(pop)
#include <dinput.h>
#include "Core/systems/input/Input.h"
//#include "imgui_impl_dx11.h"

const unsigned NumberOfVerts = 30000;
const unsigned NumberOfRecs = 1000;

namespace Editor
{

	InGameEditor* INGAMEEDITOR = NULL;

	INT64 ticksPerSecond = 0;
	INT64 time = 0;

	SkyeGraphics*  InGameEditor::m_Graphics = nullptr;
	EditorVertex*  InGameEditor::m_EditorVertexBuffer = new EditorVertex[NumberOfVerts];
	EditorRects*   InGameEditor::m_EditorRectBuffer = new EditorRects[NumberOfRecs];
	unsigned       InGameEditor::m_RectCount = 0;

	bool InGameEditor::m_isEditorActive = true;
	bool InGameEditor::m_IsGamePaused = INGAMEEDITOR->IsGamePaused();

	CameraID InGameEditor::m_editorCamera = -1;
	CameraID InGameEditor::m_gameCamera = -1;
	float4x4 InGameEditor::m_editorCameraMatrix;

	EditorMainMenuBar* InGameEditor::m_MainMenuBar = nullptr;
	std::map<std::string, EditorWindow* > InGameEditor::m_editorWindowList;
	std::vector<std::string> InGameEditor::m_editorNameList;
	std::vector<std::string> InGameEditor::m_textureNameList;
	std::vector<std::string> InGameEditor::m_modelNameList;
	std::vector<std::string> InGameEditor::m_normalTextureNameList;
	std::vector<std::string> InGameEditor::m_PaintTextureNameList;

	bool InGameEditor::m_IsReloaded = false;
	HWND InGameEditor::m_hWnd = nullptr;
	WNDCLASSEX wc;

	static ImVec4 clear_col = ImColor(58, 149, 161);

	// Data
	static ID3D11Device*            g_pd3dDevice = NULL;
	static ID3D11DeviceContext*     g_pd3dDeviceContext = NULL;
	static IDXGISwapChain*          g_pSwapChain = NULL;
	static ID3D11RenderTargetView*  g_mainRenderTargetView = NULL;

	void CreateRenderTarget()
	{
		DXGI_SWAP_CHAIN_DESC sd;
		g_pSwapChain->GetDesc(&sd);

		// Create the render target
		ID3D11Texture2D* pBackBuffer;
		D3D11_RENDER_TARGET_VIEW_DESC render_target_view_desc;
		ZeroMemory(&render_target_view_desc, sizeof(render_target_view_desc));
		render_target_view_desc.Format = sd.BufferDesc.Format;
		render_target_view_desc.ViewDimension = D3D11_RTV_DIMENSION_TEXTURE2D;
		g_pSwapChain->GetBuffer(0, __uuidof(ID3D11Texture2D), (LPVOID*)&pBackBuffer);
		g_pd3dDevice->CreateRenderTargetView(pBackBuffer, &render_target_view_desc, &g_mainRenderTargetView);
		g_pd3dDeviceContext->OMSetRenderTargets(1, &g_mainRenderTargetView, NULL);
		pBackBuffer->Release();
	}

	void CleanupRenderTarget()
	{
		if (g_mainRenderTargetView) { g_mainRenderTargetView->Release(); g_mainRenderTargetView = NULL; }
	}

	HRESULT CreateDeviceD3D(HWND hWnd)
	{
		// Setup swap chain
		DXGI_SWAP_CHAIN_DESC sd;
		{
			ZeroMemory(&sd, sizeof(sd));
			sd.BufferCount = 2;
			sd.BufferDesc.Width = 0;
			sd.BufferDesc.Height = 0;
			sd.BufferDesc.Format = DXGI_FORMAT_R8G8B8A8_UNORM;
			sd.BufferDesc.RefreshRate.Numerator = 60;
			sd.BufferDesc.RefreshRate.Denominator = 1;
			sd.Flags = DXGI_SWAP_CHAIN_FLAG_ALLOW_MODE_SWITCH;
			sd.BufferUsage = DXGI_USAGE_RENDER_TARGET_OUTPUT;
			sd.OutputWindow = hWnd;
			sd.SampleDesc.Count = 1;
			sd.SampleDesc.Quality = 0;
			sd.Windowed = TRUE;
			sd.SwapEffect = DXGI_SWAP_EFFECT_DISCARD;
		}

		UINT createDeviceFlags = 0;
#ifdef _DEBUG
		//createDeviceFlags |= D3D11_CREATE_DEVICE_DEBUG;
#endif
		D3D_FEATURE_LEVEL featureLevel;
		const D3D_FEATURE_LEVEL featureLevelArray[1] = { D3D_FEATURE_LEVEL_11_0, };
		if (D3D11CreateDeviceAndSwapChain(NULL, D3D_DRIVER_TYPE_HARDWARE, NULL, createDeviceFlags, featureLevelArray, 1, D3D11_SDK_VERSION, &sd, &g_pSwapChain, &g_pd3dDevice, &featureLevel, &g_pd3dDeviceContext) != S_OK)
			return E_FAIL;

		// Setup rasterizer
		{
			D3D11_RASTERIZER_DESC RSDesc;
			memset(&RSDesc, 0, sizeof(D3D11_RASTERIZER_DESC));
			RSDesc.FillMode = D3D11_FILL_SOLID;
			RSDesc.CullMode = D3D11_CULL_NONE;
			RSDesc.FrontCounterClockwise = FALSE;
			RSDesc.DepthBias = 0;
			RSDesc.SlopeScaledDepthBias = 0.0f;
			RSDesc.DepthBiasClamp = 0;
			RSDesc.DepthClipEnable = TRUE;
			RSDesc.ScissorEnable = TRUE;
			RSDesc.AntialiasedLineEnable = FALSE;
			RSDesc.MultisampleEnable = (sd.SampleDesc.Count > 1) ? TRUE : FALSE;

			ID3D11RasterizerState* pRState = NULL;
			g_pd3dDevice->CreateRasterizerState(&RSDesc, &pRState);
			g_pd3dDeviceContext->RSSetState(pRState);
			pRState->Release();
		}

		CreateRenderTarget();

		return S_OK;
	}

	void CleanupDeviceD3D()
	{
		CleanupRenderTarget();
		if (g_pSwapChain) { g_pSwapChain->Release(); g_pSwapChain = NULL; }
		if (g_pd3dDeviceContext) { g_pd3dDeviceContext->Release(); g_pd3dDeviceContext = NULL; }
		//if (g_pd3dDevice) { g_pd3dDevice->Release(); g_pd3dDevice = NULL; }
	}


	// extern LRESULT ImGui_ImplDX11_WndProcHandler(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam);
	LRESULT WINAPI WndProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam)
	{
		if (ImGui_ImplDX11_WndProcHandler(hWnd, msg, wParam, lParam))
			return true;

		switch (msg)
		{
		case WM_SIZE:
			if (g_pd3dDevice != NULL && wParam != SIZE_MINIMIZED)
			{
				ImGui_ImplDX11_InvalidateDeviceObjects();
				CleanupRenderTarget();
				g_pSwapChain->ResizeBuffers(0, (UINT)LOWORD(lParam), (UINT)HIWORD(lParam), DXGI_FORMAT_UNKNOWN, 0);
				CreateRenderTarget();
				ImGui_ImplDX11_CreateDeviceObjects();
			}
			return 0;
		case WM_SYSCOMMAND:
			if ((wParam & 0xfff0) == SC_KEYMENU) // Disable ALT application menu
				return 0;
			break;
		case WM_DESTROY:
			PostQuitMessage(0);
			return 0;
		}
		return DefWindowProc(hWnd, msg, wParam, lParam);
	}

	InGameEditor::InGameEditor(HWND hWnd, SkyeGraphics* graphics) : ISystem(), m_currentObject(), m_currentObjectName(), m_currentSpace(), m_currentSpaceName()
	{
		m_Graphics = graphics;
		m_currentSpace = nullptr;
		m_hWnd = hWnd;
		INGAMEEDITOR = this;
		m_editorCamera = graphics->GetCameraManager().AddCamera();
	}

	InGameEditor::~InGameEditor(void)
	{
		ImGui_ImplDX11_Shutdown();
		CleanupDeviceD3D();
		UnregisterClass("ImGui Example", wc.hInstance);
	}

	void InGameEditor::Initialize(void)
	{
		// Initialize ImGui 
		InitializeWindow();

		ImGui_ImplDX11_Init(m_hWnd, g_pd3dDevice, g_pd3dDeviceContext);

		ImGuiCustomStyle();

		///////////////////////////
		//Temp
		/*m_textureNameList.push_back("6670 - diffuse.jpg");
		m_normalTextureNameList.push_back("6670-normal.jpg");
		m_modelNameList.push_back("Cube");
		m_modelNameList.push_back("Sphere");*/
		///////////////////////////

		std::vector<Core::GameSpace*> spacelist = Core::ENGINE->Spaces();
		if (spacelist.size() != 0)
			m_currentSpace = spacelist.front();
		if (m_currentSpace->GetObjectList().Size() != 0)
			m_currentObject = m_currentSpace->GetObjectList().begin<Core::GameObject>();

		m_MainMenuBar = new EditorMainMenuBar();
		m_editorWindowList["Hierarchy"] = new HierarchyWindow(this);
		m_editorNameList.push_back("Hierarchy");

		m_editorWindowList["Inspector"] = new InspectorWindow(this);
		m_editorNameList.push_back("Inspector");

		//m_editorWindowList["Project"] = new ProjectWindow(this);
		//m_editorNameList.push_back("Project");

		m_MainMenuBar->Initialize();
		m_MainMenuBar->SetMenuBarActive(m_isEditorActive);

		auto it = m_editorWindowList.begin();
		while (it != m_editorWindowList.end())
		{
			(*it).second->Initialize();
			(*it).second->SetWindowActive(m_isEditorActive);
			++it;
		}
	}

	void InGameEditor::Update(float dt)
	{
		if (m_IsReloaded)
		{
			//If game is not the paused 
			m_IsReloaded = false;
		}

		ImGui_ImplDX11_NewFrame();

		//Update camera
		UpdateEditorCamera();
		//Update Gizmo :later

		// Update all level windows
		m_MainMenuBar->Update();

		if (m_isEditorActive)
		{
			auto it = m_editorWindowList.begin();
			while (it != m_editorWindowList.end())
			{
				(*it).second->Update();
				++it;
			}
		}
		//Check selected gizmo

		//check selected entity and draw aabb or gizmo, and updated gizmo's position

<<<<<<< local
		// Rendering
		g_pd3dDeviceContext->ClearRenderTargetView(g_mainRenderTargetView, (float*)&clear_col);
		ImGui::Render();
		g_pSwapChain->Present(0, 0);

=======
			// Rendering
			g_pd3dDeviceContext->ClearRenderTargetView(g_mainRenderTargetView, (float*)&clear_col);
			ImGui::Render();
			g_pSwapChain->Present(0, 0);
		}
>>>>>>> other
	}

	void InGameEditor::Shutdown(void)
	{
	}

	bool InGameEditor::IsEditorActive(void)
	{
		return m_isEditorActive;
	}

	void InGameEditor::SetEditorActive(bool setting)
	{
		m_isEditorActive = setting;

		auto it = m_editorWindowList.begin();
		while (it != m_editorWindowList.end())
		{
			(*it).second->SetWindowActive(setting);
			++it;
		}
	}

	SkyeGraphics* InGameEditor::GetGraphicSystem(void)
	{
		return m_Graphics;
	}

	CameraID InGameEditor::GetEditorCameraId(void)
	{
		return m_editorCamera;
	}

	float4x4& InGameEditor::GetEditorCameraMatrix(void)
	{
		return m_editorCameraMatrix;
	}

	Core::GameObject* InGameEditor::GetCurrentObject(void)
	{
		return m_currentObject;
	}
	void InGameEditor::SetCurrentObject(Core::GameObject* object)
	{
		m_currentObject = object;
	}

	Core::GameSpace* InGameEditor::GetCurrentSpace(void)
	{
		return m_currentSpace;
	}
	void InGameEditor::SetCurrentSpace(Core::GameSpace* space)
	{
		m_currentSpace = space;
	}

	bool InGameEditor::IsGamePaused(void)
	{
		return m_IsGamePaused;
	}
	void InGameEditor::SetGamePaused(bool setting)
	{
		m_IsGamePaused = setting;
	}

	bool InGameEditor::GetIsReloaded(void)
	{
		return m_IsReloaded;
	}
	void InGameEditor::SetIsReloaded(bool setting)
	{
		m_IsReloaded = setting;
	}
	std::vector<std::string> InGameEditor::GetWindowsName(void)
	{
		return m_editorNameList;
	}
	bool InGameEditor::GetSpecificWindowVis(std::string window)
	{
		return m_editorWindowList[window]->IsWindowVisible();
	}
	void InGameEditor::SetSpecificWindowVis(std::string window)
	{
		bool curr = m_editorWindowList[window]->IsWindowVisible();
		m_editorWindowList[window]->SetWindowVisible(!curr);
	}

	void InGameEditor::AddModelNameOnList(std::string name)
	{
		m_modelNameList.push_back(name);
	}
	void InGameEditor::AddTextureNameOnList(std::string name)
	{
		m_textureNameList.push_back(name);
	}
	void InGameEditor::AddNormalTextureNameOnList(std::string name)
	{
		m_normalTextureNameList.push_back(name);
	}
	void InGameEditor::AddPaintTextureNameOnList(std::string name)
	{
		m_PaintTextureNameList.push_back(name);
	}
	std::vector<std::string> InGameEditor::GetModelNameList(void)
	{
		return m_modelNameList;
	}
	std::vector<std::string> InGameEditor::GetTextureNameList(void)
	{
		return m_textureNameList;
	}
	std::vector<std::string> InGameEditor::GetNormalTextureNameList(void)
	{
		return m_normalTextureNameList;
	}
	std::vector<std::string> InGameEditor::GetPaintTextureNameList(void)
	{
		return m_PaintTextureNameList;
	}

	bool InGameEditor::InitializeWindow()
	{
		// Create application window
		wc = { sizeof(WNDCLASSEX), CS_CLASSDC, WndProc, 0L, 0L, GetModuleHandle(NULL), NULL, LoadCursor(NULL, IDC_ARROW), NULL, NULL, "ImGui Example", NULL };
		RegisterClassEx(&wc);
		m_hWnd = CreateWindow("ImGui Example", "Skye Editor", WS_OVERLAPPEDWINDOW ^ WS_THICKFRAME ^ WS_MAXIMIZEBOX, 100, 100, 1280, 800, NULL, NULL, wc.hInstance, NULL);

		//SetWindowLong(m_hWnd, GWL_EXSTYLE, WS_EX_LAYERED | WS_VISIBLE);
		//SetLayeredWindowAttributes(m_hWnd, RGB(0, 0, 0), 175, LWA_ALPHA);
		// Initialize Direct3D
		if (CreateDeviceD3D(m_hWnd) < 0)
		{
			CleanupDeviceD3D();
			UnregisterClass("ImGui Example", wc.hInstance);
			return false;
		}

		ShowWindow(m_hWnd, SW_SHOWDEFAULT);
		UpdateWindow(m_hWnd);

		return true;
	}

	bool InGameEditor::InitializeImGui(HWND hWnd)
	{
		ImGuiIO& io = ImGui::GetIO();

		// Setup display size (every frame to accommodate for window resizing)
		RECT rect;
		GetClientRect(hWnd, &rect);

		io.DisplaySize = ImVec2((float)(rect.right - rect.left), (float)(rect.bottom - rect.top));
		io.DeltaTime = 1 / 60.f;

		io.KeyMap[ImGuiKey_Tab] = VK_TAB;
		io.KeyMap[ImGuiKey_LeftArrow] = VK_LEFT;
		io.KeyMap[ImGuiKey_RightArrow] = VK_RIGHT;
		io.KeyMap[ImGuiKey_UpArrow] = VK_UP;
		io.KeyMap[ImGuiKey_DownArrow] = VK_UP;
		io.KeyMap[ImGuiKey_Home] = VK_HOME;
		io.KeyMap[ImGuiKey_End] = VK_END;
		io.KeyMap[ImGuiKey_Delete] = VK_DELETE;
		io.KeyMap[ImGuiKey_Backspace] = VK_BACK;
		io.KeyMap[ImGuiKey_Enter] = VK_RETURN;
		io.KeyMap[ImGuiKey_Escape] = VK_ESCAPE;
		io.KeyMap[ImGuiKey_A] = 'A';
		io.KeyMap[ImGuiKey_C] = 'C';
		io.KeyMap[ImGuiKey_V] = 'V';
		io.KeyMap[ImGuiKey_X] = 'X';
		io.KeyMap[ImGuiKey_Y] = 'Y';
		io.KeyMap[ImGuiKey_Z] = 'Z';

		io.RenderDrawListsFn = RenderDrawListImGui;
		io.ImeWindowHandle = hWnd;

		//Create Font Texture
		// Build
		unsigned char* pixels;
		int width, height;
		io.Fonts->GetTexDataAsRGBA32(&pixels, &width, &height);



		//Create BuffeR
		m_Graphics->GetImgui().CreateBuffer(static_cast<void*>(m_EditorVertexBuffer), sizeof(EditorVertex)* NumberOfVerts);
		m_Graphics->LoadTextureFromMemory("ImGuiTexture", pixels, Skye::Area(width, height), Skye::DataFormat::FLOAT1);
		m_Graphics->GetImgui().SetTexture(m_Graphics->GetTexture("ImGuiTexture"));
		return true;

	}
	void InGameEditor::UpdateImGui(void)
	{
		ImGuiIO& io = ImGui::GetIO();

		// Setup time step
		INT64 current_time;
		QueryPerformanceCounter((LARGE_INTEGER *)&current_time);
		io.DeltaTime = (float)(current_time - time) / ticksPerSecond;
		time = current_time;

		// Setup inputs
		BYTE keyState[256];
		GetKeyboardState(keyState);

		// Read keyboard modifiers inputs
		for (int i = 0; i < 256; ++i)
			io.KeysDown[i] = (keyState[i] & 0x80) != 0;

		io.KeyCtrl = (keyState[VK_CONTROL] & 0x8000) != 0;
		io.KeyShift = (keyState[VK_SHIFT] & 0x8000) != 0;
		io.KeyAlt = (keyState[VK_MENU] & 0x8000) != 0;

		// Hide OS mouse cursor if ImGui is drawing it
		//SetCursor(io.MouseDrawCursor ? NULL : LoadCursor(NULL, IDC_ARROW));

		// Start the frame
		ImGui::NewFrame();
	}
	void InGameEditor::RenderDrawListImGui(ImDrawData* draw_data)
	{

		ImDrawList** drawLists = draw_data->CmdLists;

		// Get the total vertex count
		size_t totalVtxCount = 0;
		EditorVertex* vtxBufferIter = m_EditorVertexBuffer;

		int ListCount = draw_data->CmdListsCount;

		for (int i = 0; i < ListCount; ++i)
			totalVtxCount += drawLists[i]->VtxBuffer.size();

		if (totalVtxCount == 0)
			return;

		/*vtxBufferIter->pos = float3(-0.5, 0.5, 0.0);
		vtxBufferIter->color = float4(1.0f, 0.5f, 0.3f, 1.0f);

		++vtxBufferIter;

		vtxBufferIter->pos = float3(0.5, 0.5, 0.0);
		vtxBufferIter->color = float4(1.0f, 0.5f, 0.3f, 1.0f);
		++vtxBufferIter;

		vtxBufferIter->pos = float3(-0.5, -0.5, 0.0);
		vtxBufferIter->color = float4(1.0f, 0.5f, 0.3f, 1.0f);

		++vtxBufferIter;*/
		// Copy and concert all vertices into a single contiguous buffer
		for (int i = 0; i < ListCount; ++i)
		{
			const ImDrawList* drawList = drawLists[i];
			const ImDrawVert* vtxSrc = &drawList->VtxBuffer[0];

			for (int j = 0; j < drawList->VtxBuffer.size(); ++j)
			{
				vtxBufferIter->pos.x = vtxSrc->pos.x - ImGui::GetIO().DisplaySize.x / 2.0f;
				vtxBufferIter->pos.y = ImGui::GetIO().DisplaySize.y / 2.0f - vtxSrc->pos.y;
				vtxBufferIter->pos.z = 0.0f;

				vtxBufferIter->color.x = (float)(vtxSrc->col & 0x000000FF) / 255.0f;
				vtxBufferIter->color.y = (float)((vtxSrc->col & 0x0000FF00) >> 8) / 255.0f;
				vtxBufferIter->color.z = (float)((vtxSrc->col & 0x00FF0000) >> 16) / 255.0f;
				vtxBufferIter->color.w = (float)((vtxSrc->col & 0xFF000000) >> 24) / 255.0f;

				vtxBufferIter->uv.x = vtxSrc->uv.x;
				vtxBufferIter->uv.y = vtxSrc->uv.y;

				++vtxBufferIter;
				++vtxSrc;
			}
		}

		// Clip Rects
		int rectCount = 0;
		int numCommands = 0;
		for (int i = 0; i < ListCount; ++i)
		{
			// Render command list
			const ImDrawList* drawList = drawLists[i];

			for (const ImDrawCmd* cmdIter = drawList->CmdBuffer.begin(); cmdIter != drawList->CmdBuffer.end(); ++cmdIter, ++numCommands)
			{
				m_EditorRectBuffer[numCommands].rect = { (LONG)cmdIter->ClipRect.x, (LONG)cmdIter->ClipRect.y, (LONG)cmdIter->ClipRect.z, (LONG)cmdIter->ClipRect.w };
				m_EditorRectBuffer[numCommands].vtxOffset = cmdIter->ElemCount;
				rectCount++;
			}
		}

		m_Graphics->GetImgui().SetRectData((ImguiGraphics::ImguiRect*)m_EditorRectBuffer);
		m_Graphics->GetImgui().Update(3, rectCount);

	}

	void InGameEditor::ImGuiCustomStyle(void)
	{
		ImGuiStyle& style = ImGui::GetStyle();

		style.WindowRounding = 5;
	}

	void InGameEditor::ShowEditor(void)
	{
		auto it = m_editorWindowList.begin();
		while (it != m_editorWindowList.end())
		{
			if ((*it).second->IsWindowActive())
				(*it).second->SetWindowVisible(true);
			++it;
		}
	}
	void InGameEditor::HideEditor(void)
	{
		auto it = m_editorWindowList.begin();
		while (it != m_editorWindowList.end())
		{
			(*it).second->SetWindowVisible(false);
			++it;
		}
	}

	void InGameEditor::UpdateEditorCamera(void)
	{
		CameraID camID = GetEditorCameraId();
		Skye::Camera * cam = GRAPHICS->GetCamera(0);
		if (Input::MouseEvent::IsLeftMouseButtonHeld())
		{

			cam->RotateAlongY(Input::MouseEvent::GetMouseDelta().x / 1000.0f);
			cam->RotateAlongX(Input::MouseEvent::GetMouseDelta().y / 1000.0f);

		}
		if (Input::MouseEvent::IsRightMouseButtonHeld())
		{

			cam->MoveAlongX(Input::MouseEvent::GetMouseDelta().x * 10.0f);
			cam->MoveAlongY(Input::MouseEvent::GetMouseDelta().y * 10.0f);

		}
		if (Input::MouseEvent::IsMiddleMouseButtonPressed())
		{
			cam->ResetBasis();
		}
	}

}
