/*****************************************************************
Filename:
Project:
Author(s):

Need to change this

All content © 2015 DigiPen (USA) Corporation, all rights reserved.
*****************************************************************/
#include "pch/precompiled.h"
#include "CTransform.h"

namespace
{
  using namespace Core;

  float4x4 CalculateWorldMatrix(float4 const &Position, quaternion const &Orientation, float4 const &Scale)
  {
    return float4x4::CreateTranslationMatrix(float3(Position.x, Position.y, Position.z)) *
      Orientation.ToMatrix() * float4x4::CreateScaleMatrix(float3(Scale.x, Scale.y, Scale.z));
  }
}

namespace Core
{
  // TODO: Make sure the right, up and forward vectors are correct
  Transform::Transform()
    : m_translation(0.f, 0.f, 0.f, 0.f)
    , m_rotation()
    , m_scale(1.f, 1.f, 1.f, 0.f)
    , m_right(1.f, 0.f, 0.f, 0.f)
    , m_up(0.f, 1.f, 0.f, 0.f)
    , m_forward(0.f, 0.f, -1.f, 0.f)
    , m_world()
  {
    m_world = CalculateWorldMatrix(m_translation, m_rotation, m_scale);
  }

  Transform::~Transform() 
  {
  }

  Transform& Transform::operator=(const Transform& rhs)
  {
    if (this != &rhs)
    {
      m_translation = rhs.GetTranslation();
      m_rotation = rhs.GetRotation();
      m_scale = rhs.GetScale();
      m_right = rhs.GetRightVector();
      m_up = rhs.GetUpVector();
      m_forward = rhs.GetForwardVector();
      m_world = rhs.GetWorldMatrix();
    }
    return *this;
  }

  bool Transform::operator==(const Transform& rhs)
  {
    return ((m_translation == rhs.m_translation) && 
      (m_scale == rhs.m_scale) && (m_rotation == rhs.m_rotation));
  }

  void Transform::SetTranslation(float4 const &tran)
  {
    m_translation = tran;
    m_world = CalculateWorldMatrix(m_translation, m_rotation, m_scale);
  }

  void Transform::SetScale(float4 const &scale)
  {
    m_scale = scale;
    m_world = CalculateWorldMatrix(m_translation, m_rotation, m_scale);
  }

  void Transform::SetRotation(quaternion const &rot)
  {
    m_rotation = rot;
    m_rotation.Normalize();
    m_world = CalculateWorldMatrix(m_translation, m_rotation, m_scale);
  }

  void Transform::SetRotation(float4x4 const &rot)
  {
    m_rotation = rot.ToQuaternion();
    m_rotation.Normalize();
    m_world = CalculateWorldMatrix(m_translation, m_rotation, m_scale);
  }

  float4 const &Transform::GetTranslation(void) const
  {
    return m_translation;
  }

  float4 const &Transform::GetScale(void) const
  {
    return m_scale;
  }

  quaternion const &Transform::GetRotation(void) const
  {
    return m_rotation;
  }

  float4 const &Transform::GetRightVector(void) const
  {
    return m_right;
  }

  float4 const &Transform::GetUpVector(void) const
  {
    return m_up;
  }

  float4 const &Transform::GetForwardVector(void) const
  {
    return m_forward;
  }

  // TODO: Check this cross product, I might need to reverse this expression
  void Transform::SetRightVector(float4 const &right)
  {
    float4 newUp = m_forward.Cross(right);
    float4 newForward = right.Cross(newUp);
    float4 newRight = right;

    newRight.Normalize();
    newUp.Normalize();
    newForward.Normalize();

    // TODO: Make sure these are correct, should it -forward?
    SetRotation(float4x4(newRight, newUp, -newForward, float4()));
  }

  // TODO: Check this cross product, I might need to reverse this expression
  void Transform::SetUpVector(float4 const &up)
  {
    float4 newRight = up.Cross(m_forward);
    float4 newForward = newRight.Cross(up);
    float4 newUp = up;

    newRight.Normalize();
    newUp.Normalize();
    newForward.Normalize();

    // TODO: Make sure these are correct, should it -forward?
    SetRotation(float4x4(newRight, newUp, -newForward, float4()));
  }

  // TODO: Check this cross product, I might need to reverse this expression
  void Transform::SetForwardVector(float4 const &forward)
  {
    float4 newRight = m_up.Cross(forward);
    float4 newUp = forward.Cross(newRight);
    float4 newForward = forward;

    newRight.Normalize();
    newUp.Normalize();
    newForward.Normalize();
    // TODO: Make sure these are correct, should it -forward?
    SetRotation(float4x4(newRight, newUp, -newForward, float4()));
  }

  void Transform::Translate(float4 const &Translation)
  {
    m_translation += Translation;
    m_world = CalculateWorldMatrix(m_translation, m_rotation, m_scale);
  }

  float4x4 Transform::GetRotationMatrix(void) const
  {
    return m_rotation.ToMatrix();
  }

  float4x4 const &Transform::GetWorldMatrix(void) const
  {
    return m_world;
  }

  //////////////////////////////////////////////////////////////////////////
  // SERIALIZATIN ROUTINE

  // TODO: Update the transform serialization routine for new variables
  void Transform::Serialize(File& file, Variable var)
  {
    Transform* tr = var.GetValue<Transform*>();

    // Cache our local Translation, Rotation, and Scale inside for the component itself
    tr->m_translation = tr->GetTranslation();
    tr->m_rotation = tr->GetRotation();
    tr->m_scale = tr->GetScale();

    // Get a pointer to the serializer
    Serializer* s = Serializer::Get();

    // Store a pointer to the typeinfo for later use
    const TypeInfo* info = var.GetTypeInfo();

    // Variable for members (translation and stuff)
    Variable mem;
    
    // Write to the file the name of the type
    file.Write("%s\n", info->Name());

    // Increase padding
    s->Padding(file, s->GetPadLevel()++);

    // Make a bracket and newline
    file.Write("{\n");

    // Translation
    s->Padding( file, s->GetPadLevel());
    file.Write("%s ", "Translation");
    mem = Variable(tr->m_translation);
    mem.Serialize(file);

    // Rotation
    s->Padding( file, s->GetPadLevel());
    file.Write("%s ", "Rotation");
    mem = Variable(tr->m_rotation);
    mem.Serialize(file);

    // Scale
    s->Padding( file, s->GetPadLevel());
    file.Write("%s ", "Scale");
    mem = Variable(tr->m_scale);
    mem.Serialize(file);

    // Decrease padding level
    s->Padding(file, --s->GetPadLevel());

    // Write a bracket
    file.Write("}\n");
  }

  void Transform::Deserialize(File& file, Variable var)
  {
    Transform* tr = var.GetValue<Transform*>();
    Serializer* s = Serializer::Get();

    // Peek function can figure out the starting level
    int startLevel = s->GetPadLevel();

    std::string line = file.GetLine('{');
    char buf[32];
    
    // Read past Translation
    file.Read("%s", &buf);

    float4 trans;
    GET_TYPE(float4)->Deserialize(file, trans);

    // Read past Rotation
    file.Read("%s", &buf);

    float rot;
    GET_TYPE(float)->Deserialize(file, rot);

    // Read past Scale
    file.Read("%s", &buf);

    float4 scale;
    GET_TYPE(float4)->Deserialize(file, scale);

    tr->m_translation = trans;
    tr->m_rotation = rot;
    tr->m_scale = scale;

    file.GetLine('\n');
    file.GetLine('\n');
  }

}